//*****************************单地址********************************
{
  "Routes": [
    {
      "DownstreamPathTemplate": "/api/{url}", //转发到下游服务地址--url变量
      "DownstreamScheme": "http", //下游http协议
      "DownstreamHostAndPorts": [
        {
          "host": "localhost",
          "port": 5003
        },
        {
          "host": "localhost",
          "port": 5004
        }
      ],
      "UpstreamPathTemplate": "/CloudCenter/{url}", //上游地址 //网关地址--url变量   //冲突的还可以加权重Priority
      "UpstreamHttpMethod": [ "GET", "POST", "DELETE", "PUT" ],
      "UseServiceDisConvery": true, //使用服务发现
      "ServiceName": "CloudCenter", //Consul服务名称
      "LoadBalancerOptions": {
        "Type": "RoundRobin" //轮询  //"LeastConnection":最少连接数服务器   "NoloadBalance":不负载均衡     "CookieStickySession":会话粘滞
      },
      //使用缓存
      "FileCacheOptions": {
        "TtlSeconds": 15, //过期时间
        "Region": "UserCache" //可以调用Api清理
      },
      //限流
      "RateLimitOptions": {
        "ClientWhitelist": [ "Microservice", "Attempt" ], //白名单  ClientId区分大小写
        "EnableRateLimiting": true,
        "Period": "1s", //5m 1h 1d
        "PeriodTimespan": 30, //多少秒之后客户端可以重试
        "Limit": 50 //统计时间段内允许的最大请求数
      },
      //熔断设置,熔断器使用Polly
      "QoSOptions": {
        "ExceptionsAllowedBeforeBreaking": 3, //熔断之前允许多少个异常请求
        "DurationOfBreak": 10000, //熔断的时间,单位为ms.超过这个时间可再请求
        "TimeoutValue": 5000 //如果下游请求的处理时间超过多少则将请求设置为超时  默认90秒
      }
      //鉴权
      //"AuthenticationOptions": {
      //  "AuthenticationProviderKey": "Bearer", //指定一个key
      //  "AllowedScopes": [ "gatewayScope" ] //id4的作用域名称
      //}
    }
  ],
  "GlobalConfiguration": {
    /*
    BaseUrl是我们外部暴露的Url，比如我们的Ocelot运行在http://123.111.11.1的一个地址上，
    但是前面有一个Nginx绑定了域名http://api.edisonchou.cn，
    那这里我们的BaseUrl就是 http://api.edisonchou.cn。
    */
    "BaseUrl": "http://localhost:4000",
    "ServiceDiscoveryProvider": {
      //Consul地址
      "Host": "localhost",
      //Consul端口
      "Port": 8500,
      "Type": "Consul" //由Consul提供服务发现，每次请求Consul
    },
    "RateLimitOptions": {
      "QuotaExceededMessage": "Customize Tips!", //限流时返回的消息
      "HttpStatusCode": 999 //限流时返回的code
    }
  }
}

